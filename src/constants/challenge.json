[
  {
    "id": "1",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "replaceAll()",
    "instruction": "replaces all occurrences of 'bad' with 'good' in the string 'bad apple, bad banana'",
    "expectedResult": "good apple, good banana",
    "template": "function main(str='good apple, good banana') {\n  // Your code here\n  return '';\n}",
    "hint": "The `replaceAll()` method replaces all occurrences of a substring in a string with a new string. Example: 'aabbcc'.replaceAll('b', 'x') returns 'aaxxcc'.",
    "points": "1"
  },
  {
    "id": "2",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "length",
    "instruction": "given 'Hello world!' return the size 12",
    "expectedResult": 12,
    "template": "function main(str='Hello world!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `.length` property returns the length of a string let length = text.length",
    "points": "1"
  },
  {
    "id": "3",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "charAt(index)",
    "instruction": "given 'Hello!' return the letter 'o' included in the text",
    "expectedResult": "o",
    "template": "function main(str='Hello!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `.charAt(index)` method returns the character at a given position in a string text.charAt(0)",
    "points": "1"
  },
  {
    "id": "4",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "charCodeAt(index)",
    "instruction": "given 'Learning Javascript!' return the J unicode 74",
    "expectedResult": 74,
    "template": "function main(str='Learning Javascript!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `.charCodeAt(index)` method returns a UTF-16 code (an integer between 0 and 65535).",
    "points": "1"
  },
  {
    "id": "5",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "at(index)",
    "instruction": "given 'Learning Javascript!' return the J",
    "expectedResult": "J",
    "template": "function main(str='Learning Javascript!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `.at(index)` Get the index letter of a string name = 'js is good' name.at(0). return j",
    "points": "1"
  },
  {
    "id": "6",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "concat('str1','str2')",
    "instruction": "given 'Learning' and 'Javascript!' returns the 'Learning Javascript!'",
    "expectedResult": "Learning Javascript!",
    "template": "function main(str1='Learning', str2='Javascript!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `.concat('str1','str2')` returns the two concateniation two strings \n string.concat('a','b') 'ab' ",
    "points": "1"
  },
  {
    "id": "7",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "indexOf('str')",
    "instruction": "Given 'I am learning js methods', check if the string contains 'learning' and return its index.",
    "expectedResult": 5,
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `indexOf()` method returns the index of the first occurrence of a specified text in a string, or -1 if not found. \nstring.indexOf('text')",
    "points": "1"
  },
  {
    "id": "8",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "lastIndexOf('str')",
    "instruction": "Given 'I am learning js methods and more methods', find the last occurrence of the word 'methods' and return its index.",
    "expectedResult": 34,
    "template": "function main(str='I am learning js methods and more methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `lastIndexOf()` method returns the index of the last occurrence of a specified text in a string, or -1 if not found. \nstring.lastIndexOf('text')",
    "points": "1"
  },
  {
    "id": "9",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "includes('str')",
    "instruction": "Given 'I am learning js methods', check if the string contains 'learning'.",
    "expectedResult": true,
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `includes()` method determines whether a string contains the specified text, returning true or false. \nstring.includes('text')",
    "points": "1"
  },
  {
    "id": "10",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "startsWith('str')",
    "instruction": "Given 'I am learning js methods', check if the string starts with 'I am'.",
    "expectedResult": true,
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `startsWith()` method checks whether a string starts with specified text, returning true or false. \nstring.startsWith('text')",
    "points": "1"
  },
  {
    "id": "11",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "endsWith('str')",
    "instruction": "Given 'I am learning js methods', check if the string ends with 'methods'.",
    "expectedResult": true,
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `endsWith()` method checks whether a string ends with specified text, returning true or false. \nstring.endsWith('text')",
    "points": "1"
  },
  {
    "id": "12",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "toUpperCase()",
    "instruction": "given 'I am learning js methods' return the string in uppercase",
    "expectedResult": "I AM LEARNING JS METHODS!",
    "template": "function main(str='I am learning js methods!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `toUpperCase()` method returns the calling string value converted to uppercase. \nstring.toUpperCase()",
    "points": "1"
  },
  {
    "id": "13",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "toLowerCase()",
    "instruction": "given 'I AM LEARNING JS METHODS' return the string in lowercase",
    "expectedResult": "i am learning js methods",
    "template": "function main(str='I AM LEARNING JS METHODS') {\n  // Your code here\n  return '';\n}",
    "hint": "The `toLowerCase()` method returns the calling string value converted to lowercase. \nstring.toLowerCase()",
    "points": "1"
  },
  {
    "id": "14",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "split('separator')",
    "instruction": "given 'I am learning js methods' split the string by spaces and return a string",
    "expectedResult": "I,am,learning,js,methods",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `split('separator')` method splits a string into an array of substrings using the specified separator. \nstring.split('separator') return [array]",
    "points": "1"
  },
  {
    "id": "15",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "replace('old', 'new')",
    "instruction": "given 'I am learning js methods' replace 'learning' with 'mastering'",
    "expectedResult": "I am mastering js methods",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `replace('old', 'new')` method returns a new string with some or all matches of a pattern replaced by a replacement. \nstring.replace('old', 'new')",
    "points": "1"
  },
  {
    "id": "16",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "slice(start, end)",
    "instruction": "Given 'I am learning js methods', extract the substring 'learning'.",
    "expectedResult": "learning",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `slice(start, end)` method extracts a section of a string and returns it as a new string. \nstring.slice(start, end)",
    "points": "1"
  },
  {
    "id": "17",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "substring(start, end)",
    "instruction": "Given 'I am learning js methods', extract the substring 'learning'.",
    "expectedResult": "learning",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `substring(start, end)` method returns the part of the string between start and end indices. \nstring.substring(start, end)",
    "points": "1"
  },
  {
    "id": "18",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "trim()",
    "instruction": "Given '   I am learning js methods   ', remove leading and trailing spaces.",
    "expectedResult": "I am learning js methods",
    "template": "function main(str='   I am learning js methods   ') {\n  // Your code here\n  return '';\n}",
    "hint": "The `trim()` method removes whitespace from both ends of a string. \nstring.trim()",
    "points": "1"
  },
  {
    "id": "19",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "trimStart()",
    "instruction": "Given '   I am learning js methods', remove leading spaces.",
    "expectedResult": "I am learning js methods",
    "template": "function main(str='   I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `trimStart()` method removes whitespace only from the start of a string. \nstring.trimStart()",
    "points": "1"
  },
  {
    "id": "20",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "trimEnd()",
    "instruction": "Given 'I am learning js methods   ', remove trailing spaces.",
    "expectedResult": "I am learning js methods",
    "template": "function main(str='I am learning js methods   ') {\n  // Your code here\n  return '';\n}",
    "hint": "The `trimEnd()` method removes whitespace only from the end of a string. \nstring.trimEnd()",
    "points": "1"
  },
  {
    "id": "21",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "padStart(targetLength, padString)",
    "instruction": "Given 'learning', pad the string to make its length 10 by adding 'js' to the start.",
    "expectedResult": "jslearning",
    "template": "function main(str='learning') {\n  // Your code here\n  return '';\n}",
    "hint": "The `padStart()` method pads the current string with another string (multiple times, if needed) so that the resulting string reaches the given length. \nstring.padStart(targetLength, padString)",
    "points": "2"
  },
  {
    "id": "22",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "padEnd(targetLength, padString)",
    "instruction": "Given 'learning', pad the string to make its length 10 by adding 'js' to the end.",
    "expectedResult": "learningjs",
    "template": "function main(str='learning') {\n  // Your code here\n  return '';\n}",
    "hint": "The `padEnd()` method pads the current string with another string (multiple times, if needed) so that the resulting string reaches the given length. \nstring.padEnd(targetLength, padString)",
    "points": "2"
  },
  {
    "id": "23",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "repeat(count)",
    "instruction": "Given 'js ', repeat the string 3 times.",
    "expectedResult": "js js js ",
    "template": "function main(str='js ') {\n  // Your code here\n  return '';\n}",
    "hint": "The `repeat(count)` method constructs and returns a new string which contains the specified number of copies of the string it was called on. \nstring.repeat(count)",
    "points": "2"
  },
  {
    "id": "24",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "replace('old', 'new')",
    "instruction": "Given 'I am learning js', replace 'learning' with 'mastering'.",
    "expectedResult": "'I am mastering js'",
    "template": "function main(str='I am learning js') {\n  // Your code here\n  return '';\n}",
    "hint": "The `replace('old', 'new')` method returns a new string with some or all matches of a pattern replaced by a replacement. \nstring.replace('old', 'new')",
    "points": "2"
  },
  {
    "id": "25",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "replaceAll('old', 'new')",
    "instruction": "Given 'js is fun, js is great', replace all occurrences of 'js' with 'JavaScript'.",
    "expectedResult": "'JavaScript is fun, JavaScript is great'",
    "template": "function main(str='js is fun, js is great') {\n  // Your code here\n  return '';\n}",
    "hint": "The `replaceAll('old', 'new')` method returns a new string with all matches of a pattern replaced by a replacement. \nstring.replaceAll('old', 'new')",
    "points": "2"
  },
  {
    "id": "26",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "split('separator')",
    "instruction": "Given 'I am learning js', split the string into an array of words.",
    "expectedResult": "['I', 'am', 'learning', 'js']",
    "template": "function main(str='I am learning js') {\n  // Your code here\n  return '';\n}",
    "hint": "The `split('separator')` method splits a string into an array of substrings using the specified separator. \nstring.split('separator')",
    "points": "1"
  },
  {
    "id": "27",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "toString()",
    "instruction": "Given a number 123, convert it to a string.",
    "expectedResult": "123",
    "template": "function main(num=123) {\n  // Your code here\n  return '';\n}",
    "hint": "The `toString()` method converts a number, boolean, or object to a string representation. For example, `num.toString()`.",
    "points": "1"
  },
  {
    "id": "28",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "valueOf()",
    "instruction": "Given a string object `new String('learning')`, retrieve its primitive string value.",
    "expectedResult": "learning",
    "template": "function main(strObj=new String('learning')) {\n  // Your code here\n  return '';\n}",
    "hint": "The `valueOf()` method returns the primitive value of a string object. For example, `strObj.valueOf()`.",
    "points": "1"
  },
  {
    "id": "29",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "search(/regex/)",
    "instruction": "Given 'I am learning js methods', search for the first occurrence of the word 'learning' and return its index.",
    "expectedResult": 5,
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `search()` method executes a search for a match between a regular expression and this string and returns the index. \n string.search(/text/g)",
    "points": "1"
  },
  {
    "id": "30",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "match(/regex/)",
    "instruction": "Given 'I am learning js methods', use a regular expression to find all words containing 'ing'.",
    "expectedResult": "['learning']",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `match()` method retrieves the result of matching a string against a regular expression. \nstring.match(/regex/)",
    "points": "1"
  },
  {
    "id": "31",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "matchAll(/regex/)",
    "instruction": "Given 'I am learning js methods', use a regular expression to find all words and return an iterator.",
    "expectedResult": "[Iterator]",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `matchAll()` method returns an iterator of all results matching a regular expression, including capturing groups. Use Array.from to convert the iterator. \nstring.matchAll(/regex/)",
    "points": "2"
  }
]
[
  {
    "id": "1",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "replaceAll()",
    "instruction": "replaces all occurrences of 'bad' with 'good' in the string 'bad apple, bad banana'",
    "expectedResult": "good apple, good banana",
    "template": "function main(str='good apple, good banana') {\n  // Your code here\n  return '';\n}",
    "hint": "The `replaceAll()` method replaces all occurrences of a substring in a string with a new string. Example: 'aabbcc'.replaceAll('b', 'x') returns 'aaxxcc'.",
    "points": "1"
  },
  {
    "id": "2",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "length",
    "instruction": "given 'Hello world!' return the size 12",
    "expectedResult": 12,
    "template": "function main(str='Hello world!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `.length` property returns the length of a string let length = text.length",
    "points": "1"
  },
  {
    "id": "3",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "charAt(index)",
    "instruction": "given 'Hello!' return the letter 'o' included in the text",
    "expectedResult": "o",
    "template": "function main(str='Hello!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `.charAt(index)` method returns the character at a given position in a string text.charAt(0)",
    "points": "1"
  },
  {
    "id": "4",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "charCodeAt(index)",
    "instruction": "given 'Learning Javascript!' return the J unicode 74",
    "expectedResult": 74,
    "template": "function main(str='Learning Javascript!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `.charCodeAt(index)` method returns a UTF-16 code (an integer between 0 and 65535).",
    "points": "1"
  },
  {
    "id": "5",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "at(index)",
    "instruction": "given 'Learning Javascript!' return the J",
    "expectedResult": "J",
    "template": "function main(str='Learning Javascript!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `.at(index)` Get the index letter of a string name = 'js is good' name.at(0). return j",
    "points": "1"
  },
  {
    "id": "6",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "concat('str1','str2')",
    "instruction": "given 'Learning' and 'Javascript!' returns the 'Learning Javascript!'",
    "expectedResult": "Learning Javascript!",
    "template": "function main(str1='Learning', str2='Javascript!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `.concat('str1','str2')` returns the two concateniation two strings \n string.concat('a','b') 'ab' ",
    "points": "1"
  },
  {
    "id": "7",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "indexOf('str')",
    "instruction": "Given 'I am learning js methods', check if the string contains 'learning' and return its index.",
    "expectedResult": 5,
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `indexOf()` method returns the index of the first occurrence of a specified text in a string, or -1 if not found. \nstring.indexOf('text')",
    "points": "1"
  },
  {
    "id": "8",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "lastIndexOf('str')",
    "instruction": "Given 'I am learning js methods and more methods', find the last occurrence of the word 'methods' and return its index.",
    "expectedResult": 34,
    "template": "function main(str='I am learning js methods and more methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `lastIndexOf()` method returns the index of the last occurrence of a specified text in a string, or -1 if not found. \nstring.lastIndexOf('text')",
    "points": "1"
  },
  {
    "id": "9",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "includes('str')",
    "instruction": "Given 'I am learning js methods', check if the string contains 'learning'.",
    "expectedResult": true,
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `includes()` method determines whether a string contains the specified text, returning true or false. \nstring.includes('text')",
    "points": "1"
  },
  {
    "id": "10",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "startsWith('str')",
    "instruction": "Given 'I am learning js methods', check if the string starts with 'I am'.",
    "expectedResult": true,
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `startsWith()` method checks whether a string starts with specified text, returning true or false. \nstring.startsWith('text')",
    "points": "1"
  },
  {
    "id": "11",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "endsWith('str')",
    "instruction": "Given 'I am learning js methods', check if the string ends with 'methods'.",
    "expectedResult": true,
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `endsWith()` method checks whether a string ends with specified text, returning true or false. \nstring.endsWith('text')",
    "points": "1"
  },
  {
    "id": "12",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "toUpperCase()",
    "instruction": "given 'I am learning js methods' return the string in uppercase",
    "expectedResult": "I AM LEARNING JS METHODS!",
    "template": "function main(str='I am learning js methods!') {\n  // Your code here\n  return '';\n}",
    "hint": "The `toUpperCase()` method returns the calling string value converted to uppercase. \nstring.toUpperCase()",
    "points": "1"
  },
  {
    "id": "13",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "toLowerCase()",
    "instruction": "given 'I AM LEARNING JS METHODS' return the string in lowercase",
    "expectedResult": "i am learning js methods",
    "template": "function main(str='I AM LEARNING JS METHODS') {\n  // Your code here\n  return '';\n}",
    "hint": "The `toLowerCase()` method returns the calling string value converted to lowercase. \nstring.toLowerCase()",
    "points": "1"
  },
  {
    "id": "14",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "split('separator')",
    "instruction": "given 'I am learning js methods' split the string by spaces and return a string",
    "expectedResult": "I,am,learning,js,methods",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `split('separator')` method splits a string into an array of substrings using the specified separator. \nstring.split('separator') return [array]",
    "points": "1"
  },
  {
    "id": "15",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "replace('old', 'new')",
    "instruction": "given 'I am learning js methods' replace 'learning' with 'mastering'",
    "expectedResult": "I am mastering js methods",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `replace('old', 'new')` method returns a new string with some or all matches of a pattern replaced by a replacement. \nstring.replace('old', 'new')",
    "points": "1"
  },
  {
    "id": "16",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "slice(start, end)",
    "instruction": "Given 'I am learning js methods', extract the substring 'learning'.",
    "expectedResult": "learning",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `slice(start, end)` method extracts a section of a string and returns it as a new string. \nstring.slice(start, end)",
    "points": "1"
  },
  {
    "id": "17",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "substring(start, end)",
    "instruction": "Given 'I am learning js methods', extract the substring 'learning'.",
    "expectedResult": "learning",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `substring(start, end)` method returns the part of the string between start and end indices. \nstring.substring(start, end)",
    "points": "1"
  },
  {
    "id": "18",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "trim()",
    "instruction": "Given '   I am learning js methods   ', remove leading and trailing spaces.",
    "expectedResult": "I am learning js methods",
    "template": "function main(str='   I am learning js methods   ') {\n  // Your code here\n  return '';\n}",
    "hint": "The `trim()` method removes whitespace from both ends of a string. \nstring.trim()",
    "points": "1"
  },
  {
    "id": "19",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "trimStart()",
    "instruction": "Given '   I am learning js methods', remove leading spaces.",
    "expectedResult": "I am learning js methods",
    "template": "function main(str='   I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `trimStart()` method removes whitespace only from the start of a string. \nstring.trimStart()",
    "points": "1"
  },
  {
    "id": "20",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "trimEnd()",
    "instruction": "Given 'I am learning js methods   ', remove trailing spaces.",
    "expectedResult": "I am learning js methods",
    "template": "function main(str='I am learning js methods   ') {\n  // Your code here\n  return '';\n}",
    "hint": "The `trimEnd()` method removes whitespace only from the end of a string. \nstring.trimEnd()",
    "points": "1"
  },
  {
    "id": "21",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "padStart(targetLength, padString)",
    "instruction": "Given 'learning', pad the string to make its length 10 by adding 'js' to the start.",
    "expectedResult": "jslearning",
    "template": "function main(str='learning') {\n  // Your code here\n  return '';\n}",
    "hint": "The `padStart()` method pads the current string with another string (multiple times, if needed) so that the resulting string reaches the given length. \nstring.padStart(targetLength, padString)",
    "points": "2"
  },
  {
    "id": "22",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "padEnd(targetLength, padString)",
    "instruction": "Given 'learning', pad the string to make its length 10 by adding 'js' to the end.",
    "expectedResult": "learningjs",
    "template": "function main(str='learning') {\n  // Your code here\n  return '';\n}",
    "hint": "The `padEnd()` method pads the current string with another string (multiple times, if needed) so that the resulting string reaches the given length. \nstring.padEnd(targetLength, padString)",
    "points": "2"
  },
  {
    "id": "23",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "repeat(count)",
    "instruction": "Given 'js ', repeat the string 3 times.",
    "expectedResult": "js js js ",
    "template": "function main(str='js ') {\n  // Your code here\n  return '';\n}",
    "hint": "The `repeat(count)` method constructs and returns a new string which contains the specified number of copies of the string it was called on. \nstring.repeat(count)",
    "points": "2"
  },
  {
    "id": "24",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "replace('old', 'new')",
    "instruction": "Given 'I am learning js', replace 'learning' with 'mastering'.",
    "expectedResult": "'I am mastering js'",
    "template": "function main(str='I am learning js') {\n  // Your code here\n  return '';\n}",
    "hint": "The `replace('old', 'new')` method returns a new string with some or all matches of a pattern replaced by a replacement. \nstring.replace('old', 'new')",
    "points": "2"
  },
  {
    "id": "25",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "replaceAll('old', 'new')",
    "instruction": "Given 'js is fun, js is great', replace all occurrences of 'js' with 'JavaScript'.",
    "expectedResult": "'JavaScript is fun, JavaScript is great'",
    "template": "function main(str='js is fun, js is great') {\n  // Your code here\n  return '';\n}",
    "hint": "The `replaceAll('old', 'new')` method returns a new string with all matches of a pattern replaced by a replacement. \nstring.replaceAll('old', 'new')",
    "points": "2"
  },
  {
    "id": "26",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "split('separator')",
    "instruction": "Given 'I am learning js', split the string into an array of words.",
    "expectedResult": "['I', 'am', 'learning', 'js']",
    "template": "function main(str='I am learning js') {\n  // Your code here\n  return '';\n}",
    "hint": "The `split('separator')` method splits a string into an array of substrings using the specified separator. \nstring.split('separator')",
    "points": "1"
  },
  {
    "id": "27",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "toString()",
    "instruction": "Given a number 123, convert it to a string.",
    "expectedResult": "123",
    "template": "function main(num=123) {\n  // Your code here\n  return '';\n}",
    "hint": "The `toString()` method converts a number, boolean, or object to a string representation. For example, `num.toString()`.",
    "points": "1"
  },
  {
    "id": "28",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "valueOf()",
    "instruction": "Given a string object `new String('learning')`, retrieve its primitive string value.",
    "expectedResult": "learning",
    "template": "function main(strObj=new String('learning')) {\n  // Your code here\n  return '';\n}",
    "hint": "The `valueOf()` method returns the primitive value of a string object. For example, `strObj.valueOf()`.",
    "points": "1"
  },
  {
    "id": "29",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "search(/regex/)",
    "instruction": "Given 'I am learning js methods', search for the first occurrence of the word 'learning' and return its index.",
    "expectedResult": 5,
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `search()` method executes a search for a match between a regular expression and this string and returns the index. \n string.search(/text/g)",
    "points": "1"
  },
  {
    "id": "30",
    "type": "memorize",
    "dificult": "easy",
    "method": "string",
    "function": "match(/regex/)",
    "instruction": "Given 'I am learning js methods', use a regular expression to find all words containing 'ing'.",
    "expectedResult": "['learning']",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `match()` method retrieves the result of matching a string against a regular expression. \nstring.match(/regex/)",
    "points": "1"
  },
  {
    "id": "31",
    "type": "memorize",
    "dificult": "medium",
    "method": "string",
    "function": "matchAll(/regex/)",
    "instruction": "Given 'I am learning js methods', use a regular expression to find all words and return an iterator.",
    "expectedResult": "[Iterator]",
    "template": "function main(str='I am learning js methods') {\n  // Your code here\n  return '';\n}",
    "hint": "The `matchAll()` method returns an iterator of all results matching a regular expression, including capturing groups. Use Array.from to convert the iterator. \nstring.matchAll(/regex/)",
    "points": "2"
  },
  {
    "id": "32",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.from()",
    "instruction": "Given a string 'hello', use `Array.from()` to convert it into an array of characters.",
    "expectedResult": "['h', 'e', 'l', 'l', 'o']",
    "template": "function main(str='hello') {\n  // Your code here\n  return '';\n}",
    "hint": "The `Array.from()` method creates a new array from an iterable object or array-like value. \nArray.from('string')",
    "points": "1"
  },
  {
    "id": "33",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.fromAsync()",
    "instruction": "Create an array from an asynchronous generator that yields 1, 2, and 3 using `Array.fromAsync()`.",
    "expectedResult": "[1, 2, 3]",
    "template": "async function main() {\n  async function* generator() {\n    yield 1;\n    yield 2;\n    yield 3;\n  }\n  // Your code here\n  return '';\n}",
    "hint": "The `Array.fromAsync()` method creates an array asynchronously from an async iterable object. \nArray.fromAsync(asyncIterable)",
    "points": "2"
  },
  {
    "id": "34",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.isArray()",
    "instruction": "Check if the input `[1, 2, 3]` is an array using `Array.isArray()`.",
    "expectedResult": "true",
    "template": "function main(input=[1, 2, 3]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Array.isArray()` method checks if a value is an array. \nArray.isArray(value)",
    "points": "1"
  },
  {
    "id": "35",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.of()",
    "instruction": "Use `Array.of()` to create an array containing the numbers 1, 2, and 3.",
    "expectedResult": "[1, 2, 3]",
    "template": "function main() {\n  // Your code here\n  return '';\n}",
    "hint": "The `Array.of()` method creates a new array from its arguments. \nArray.of(1, 2, 3)",
    "points": "1"
  },
  {
    "id": "36",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.at()",
    "instruction": "Given the array [10, 20, 30, 40], use `at()` to access the third element (index 2).",
    "expectedResult": "30",
    "template": "function main(arr=[10, 20, 30, 40]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `at()` method accesses the element at the specified index, including negative indexing. \narray.at(index)",
    "points": "1"
  },
  {
    "id": "37",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.concat()",
    "instruction": "Combine the arrays [1, 2] and [3, 4] using `concat()`.",
    "expectedResult": "[1, 2, 3, 4]",
    "template": "function main(arr1=[1, 2], arr2=[3, 4]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `concat()` method merges two or more arrays into a new array. \narray.concat(array2)",
    "points": "1"
  },
  {
    "id": "38",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.copyWithin()",
    "instruction": "Given the array [1, 2, 3, 4, 5], use `copyWithin()` to copy elements starting at index 0 to index 3.",
    "expectedResult": "[1, 2, 3, 1, 2]",
    "template": "function main(arr=[1, 2, 3, 4, 5]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `copyWithin()` method copies part of an array to another location in the same array. \narray.copyWithin(target, start)",
    "points": "2"
  },
  {
    "id": "39",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.entries()",
    "instruction": "Given the array ['a', 'b', 'c'], use `entries()` to return an iterator of index-value pairs.",
    "expectedResult": "[[0, 'a'], [1, 'b'], [2, 'c']]",
    "template": "function main(arr=['a', 'b', 'c']) {\n  // Your code here\n  return '';\n}",
    "hint": "The `entries()` method returns an iterator of key-value pairs. Use `Array.from()` to convert it to an array.",
    "points": "2"
  },
  {
    "id": "40",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.every()",
    "instruction": "Check if all numbers in the array [2, 4, 6] are even using `every()`.",
    "expectedResult": "true",
    "template": "function main(arr=[2, 4, 6]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `every()` method tests if all elements pass a condition. \narray.every(callback)",
    "points": "1"
  },
  {
    "id": "41",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.fill()",
    "instruction": "Fill the array [1, 2, 3, 4] with the value 0 from index 1 to 3 using `fill()`.",
    "expectedResult": "[1, 0, 0, 4]",
    "template": "function main(arr=[1, 2, 3, 4]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `fill()` method changes all elements in a range to a static value. \narray.fill(value, start, end)",
    "points": "1"
  },
  {
    "id": "42",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.filter()",
    "instruction": "Filter out all odd numbers from the array [1, 2, 3, 4, 5] using `filter()`.",
    "expectedResult": "[2, 4]",
    "template": "function main(arr=[1, 2, 3, 4, 5]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `filter()` method creates a new array with elements that pass a condition. \narray.filter(callback)",
    "points": "2"
  },
  {
    "id": "43",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.find()",
    "instruction": "Find the first number greater than 10 in the array [5, 12, 8, 130, 44] using `find()`.",
    "expectedResult": "12",
    "template": "function main(arr=[5, 12, 8, 130, 44]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `find()` method returns the first element that satisfies a condition. \narray.find(callback)",
    "points": "2"
  },
  {
    "id": "44",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.findIndex()",
    "instruction": "Find the index of the first number greater than 10 in the array [5, 12, 8, 130, 44] using `findIndex()`.",
    "expectedResult": "1",
    "template": "function main(arr=[5, 12, 8, 130, 44]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `findIndex()` method returns the index of the first element that satisfies a condition. \narray.findIndex(callback)",
    "points": "2"
  },
  {
    "id": "45",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.findLast()",
    "instruction": "Find the last number greater than 10 in the array [5, 12, 8, 130, 44] using `findLast()`.",
    "expectedResult": "44",
    "template": "function main(arr=[5, 12, 8, 130, 44]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `findLast()` method returns the last element that satisfies a condition. \narray.findLast(callback)",
    "points": "2"
  },
  {
    "id": "46",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.findLastIndex()",
    "instruction": "Find the index of the last number greater than 10 in the array [5, 12, 8, 130, 44] using `findLastIndex()`.",
    "expectedResult": "4",
    "template": "function main(arr=[5, 12, 8, 130, 44]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `findLastIndex()` method returns the index of the last element that satisfies a condition. \narray.findLastIndex(callback)",
    "points": "2"
  },
  {
    "id": "47",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.flat()",
    "instruction": "Flatten the array [1, [2, [3, [4]]]] one level deep using `flat()`.",
    "expectedResult": "[1, 2, [3, [4]]]",
    "template": "function main(arr=[1, [2, [3, [4]]]]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `flat()` method creates a new array with elements flattened to a specified depth. \narray.flat(depth)",
    "points": "2"
  },
  {
    "id": "48",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.flatMap()",
    "instruction": "Map each number in [1, 2, 3] to an array containing the number and its square, then flatten the result using `flatMap()`.",
    "expectedResult": "[1, 1, 2, 4, 3, 9]",
    "template": "function main(arr=[1, 2, 3]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `flatMap()` method maps and flattens the result into a new array. \narray.flatMap(callback)",
    "points": "2"
  },
  {
    "id": "49",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.forEach()",
    "instruction": "Log each number in the array [1, 2, 3] to the console using `forEach()`.",
    "expectedResult": "Logs: 1, 2, 3",
    "template": "function main(arr=[1, 2, 3]) {\n  // Your code here\n}",
    "hint": "The `forEach()` method executes a function once for each array element. \narray.forEach(callback)",
    "points": "1"
  },
  {
    "id": "50",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.includes()",
    "instruction": "Check if the array [1, 2, 3, 4] includes the number 3 using `includes()`.",
    "expectedResult": "true",
    "template": "function main(arr=[1, 2, 3, 4]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `includes()` method checks if an array contains a specific value. \narray.includes(value)",
    "points": "1"
  },
  {
    "id": "51",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.indexOf()",
    "instruction": "Find the index of the first occurrence of the number 3 in the array [1, 2, 3, 4, 3] using `indexOf()`.",
    "expectedResult": "2",
    "template": "function main(arr=[1, 2, 3, 4, 3]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `indexOf()` method returns the first index where the value occurs. \narray.indexOf(value)",
    "points": "1"
  },
  {
    "id": "52",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.join()",
    "instruction": "Join all elements of the array ['a', 'b', 'c'] into a single string, separated by '-' using `join()`.",
    "expectedResult": "'a-b-c'",
    "template": "function main(arr=['a', 'b', 'c']) {\n  // Your code here\n  return '';\n}",
    "hint": "The `join()` method combines all elements of an array into a string. \narray.join(separator)",
    "points": "1"
  },
  {
    "id": "53",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.keys()",
    "instruction": "Return an iterator of the keys (indexes) of the array ['a', 'b', 'c'] using `keys()`.",
    "expectedResult": "[0, 1, 2]",
    "template": "function main(arr=['a', 'b', 'c']) {\n  // Your code here\n  return '';\n}",
    "hint": "The `keys()` method returns an iterator of array indexes. Use `Array.from()` to convert it to an array.",
    "points": "2"
  },
  {
    "id": "54",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.lastIndexOf()",
    "instruction": "Find the index of the last occurrence of the number 3 in the array [1, 2, 3, 4, 3] using `lastIndexOf()`.",
    "expectedResult": "4",
    "template": "function main(arr=[1, 2, 3, 4, 3]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `lastIndexOf()` method returns the last index where the value occurs. \narray.lastIndexOf(value)",
    "points": "1"
  },
  {
    "id": "55",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.map()",
    "instruction": "Create a new array by squaring each number in [1, 2, 3] using `map()`.",
    "expectedResult": "[1, 4, 9]",
    "template": "function main(arr=[1, 2, 3]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `map()` method creates a new array by applying a function to each element. \narray.map(callback)",
    "points": "2"
  },
  {
    "id": "56",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.pop()",
    "instruction": "Remove the last element from the array [1, 2, 3] using `pop()`.",
    "expectedResult": "3",
    "template": "function main(arr=[1, 2, 3]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `pop()` method removes the last element of an array and returns it. \narray.pop()",
    "points": "1"
  },
  {
    "id": "57",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.push()",
    "instruction": "Add the number 4 to the array [1, 2, 3] using `push()`.",
    "expectedResult": "[1, 2, 3, 4]",
    "template": "function main(arr=[1, 2, 3]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `push()` method adds one or more elements to the end of an array. \narray.push(value)",
    "points": "1"
  },
  {
    "id": "58",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.reduce()",
    "instruction": "Calculate the sum of all numbers in the array [1, 2, 3, 4] using `reduce()`.",
    "expectedResult": "10",
    "template": "function main(arr=[1, 2, 3, 4]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `reduce()` method applies a function against an accumulator to reduce the array to a single value. \narray.reduce(callback, initialValue)",
    "points": "2"
  },
  {
    "id": "59",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.reverse()",
    "instruction": "Reverse the array [1, 2, 3, 4] using `reverse()`.",
    "expectedResult": "[4, 3, 2, 1]",
    "template": "function main(arr=[1, 2, 3, 4]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `reverse()` method reverses the array in place. \narray.reverse()",
    "points": "1"
  },
  {
    "id": "60",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.shift()",
    "instruction": "Remove the first element of the array [1, 2, 3] using `shift()`.",
    "expectedResult": "[2, 3]",
    "template": "function main(arr=[1, 2, 3]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `shift()` method removes the first element of an array and returns it. \narray.shift()",
    "points": "1"
  },
  {
    "id": "61",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.slice()",
    "instruction": "Extract the subarray [2, 3] from the array [1, 2, 3, 4] using `slice()`.",
    "expectedResult": "[2, 3]",
    "template": "function main(arr=[1, 2, 3, 4]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `slice()` method returns a shallow copy of a portion of an array. \narray.slice(start, end)",
    "points": "1"
  },
  {
    "id": "62",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.some()",
    "instruction": "Check if any number in the array [1, 2, 3, 4] is greater than 3 using `some()`.",
    "expectedResult": "true",
    "template": "function main(arr=[1, 2, 3, 4]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `some()` method tests if at least one element satisfies a condition. \narray.some(callback)",
    "points": "2"
  },
  {
    "id": "63",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.sort()",
    "instruction": "Sort the array [3, 1, 4, 2] in ascending order using `sort()`.",
    "expectedResult": "[1, 2, 3, 4]",
    "template": "function main(arr=[3, 1, 4, 2]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `sort()` method sorts elements in place. Provide a comparator function for numeric sorting. \narray.sort((a, b) => a - b)",
    "points": "2"
  },
  {
    "id": "64",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.splice()",
    "instruction": "Remove 2 elements starting at index 1 in the array [1, 2, 3, 4] using `splice()`.",
    "expectedResult": "[1, 4]",
    "template": "function main(arr=[1, 2, 3, 4]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `splice()` method changes the contents of an array by removing, replacing, or adding elements. \narray.splice(start, deleteCount)",
    "points": "2"
  },
  {
    "id": "65",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.toLocaleString()",
    "instruction": "Convert the array [1000, 'a'] to a localized string using `toLocaleString()`.",
    "expectedResult": "'1,000,a'",
    "template": "function main(arr=[1000, 'a']) {\n  // Your code here\n  return '';\n}",
    "hint": "The `toLocaleString()` method converts array elements to a string using locale-specific formatting. \narray.toLocaleString()",
    "points": "2"
  },
  {
    "id": "66",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.toReversed()",
    "instruction": "Return a reversed version of the array [1, 2, 3, 4] using `toReversed()`.",
    "expectedResult": "[4, 3, 2, 1]",
    "template": "function main(arr=[1, 2, 3, 4]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `toReversed()` method returns a new reversed array without mutating the original array. \narray.toReversed()",
    "points": "1"
  },
  {
    "id": "67",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.toSorted()",
    "instruction": "Return a sorted version of the array [3, 1, 4, 2] using `toSorted()`.",
    "expectedResult": "[1, 2, 3, 4]",
    "template": "function main(arr=[3, 1, 4, 2]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `toSorted()` method returns a new sorted array without mutating the original. Provide a comparator for numeric sorting. \narray.toSorted((a, b) => a - b)",
    "points": "1"
  },
  {
    "id": "68",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.toSpliced()",
    "instruction": "Remove 2 elements starting at index 1 from the array [1, 2, 3, 4] using `toSpliced()`.",
    "expectedResult": "[1, 4]",
    "template": "function main(arr=[1, 2, 3, 4]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `toSpliced()` method returns a new array with the specified changes without modifying the original. \narray.toSpliced(start, deleteCount)",
    "points": "1"
  },
  {
    "id": "69",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.toString()",
    "instruction": "Convert the array [1, 2, 3] to a string using `toString()`.",
    "expectedResult": "'1,2,3'",
    "template": "function main(arr=[1, 2, 3]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `toString()` method converts an array into a string. \narray.toString()",
    "points": "1"
  },
  {
    "id": "70",
    "type": "memorize",
    "dificult": "easy",
    "method": "array",
    "function": "Array.unshift()",
    "instruction": "Add the number 0 to the beginning of the array [1, 2, 3] using `unshift()`.",
    "expectedResult": "[0, 1, 2, 3]",
    "template": "function main(arr=[1, 2, 3]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `unshift()` method adds one or more elements to the beginning of an array. \narray.unshift(value)",
    "points": "1"
  },
  {
    "id": "71",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.values()",
    "instruction": "Return an iterator of values from the array ['a', 'b', 'c'] using `values()`.",
    "expectedResult": "['a', 'b', 'c']",
    "template": "function main(arr=['a', 'b', 'c']) {\n  // Your code here\n  return '';\n}",
    "hint": "The `values()` method returns an iterator of the array's values. Use `Array.from()` to convert it to an array.",
    "points": "2"
  },
  {
    "id": "72",
    "type": "memorize",
    "dificult": "medium",
    "method": "array",
    "function": "Array.with()",
    "instruction": "Replace the element at index 1 with 100 in the array [1, 2, 3] using `with()`.",
    "expectedResult": "[1, 100, 3]",
    "template": "function main(arr=[1, 2, 3]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `with()` method creates a new array with the specified index replaced. \narray.with(index, value)",
    "points": "2"
  },
  {
    "id": "73",
    "type": "memorize",
    "dificult": "medium",
    "method": "object",
    "function": "Object.assign()",
    "instruction": "Merge the properties of two objects {a: 1} and {b: 2} into a new object using `Object.assign()`.",
    "expectedResult": "{a: 1, b: 2}",
    "template": "function main(obj1={a: 1}, obj2={b: 2}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.assign()` method copies properties from one or more objects to a target object. \nObject.assign(target, ...sources)",
    "points": "2"
  },
  {
    "id": "74",
    "type": "memorize",
    "dificult": "medium",
    "method": "object",
    "function": "Object.create()",
    "instruction": "Create an object with `obj` as its prototype using `Object.create()`. Let `obj` have a property 'a: 1'.",
    "expectedResult": "{a: 1}",
    "template": "function main(obj={a: 1}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.create()` method creates a new object with the specified prototype. \nObject.create(proto)",
    "points": "2"
  },
  {
    "id": "75",
    "type": "memorize",
    "dificult": "hard",
    "method": "object",
    "function": "Object.defineProperties()",
    "instruction": "Define two properties 'a' and 'b' on an empty object with values 1 and 2 using `Object.defineProperties()`.",
    "expectedResult": "{a: 1, b: 2}",
    "template": "function main() {\n  const obj = {};\n  // Your code here\n  return obj;\n}",
    "hint": "The `Object.defineProperties()` method defines multiple properties on an object. \nObject.defineProperties(obj, descriptors)",
    "points": "3"
  },
  {
    "id": "76",
    "type": "memorize",
    "dificult": "medium",
    "method": "object",
    "function": "Object.defineProperty()",
    "instruction": "Define a property 'a' with value 1 and make it read-only on an object using `Object.defineProperty()`.",
    "expectedResult": "{a: 1}",
    "template": "function main() {\n  const obj = {};\n  // Your code here\n  return obj;\n}",
    "hint": "The `Object.defineProperty()` method defines a property on an object with specific descriptors. \nObject.defineProperty(obj, prop, descriptor)",
    "points": "2"
  },
  {
    "id": "77",
    "type": "memorize",
    "dificult": "easy",
    "method": "object",
    "function": "Object.entries()",
    "instruction": "Convert the object {a: 1, b: 2} into an array of key-value pairs using `Object.entries()`.",
    "expectedResult": "[['a', 1], ['b', 2]]",
    "template": "function main(obj={a: 1, b: 2}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.entries()` method returns an array of a given object's key-value pairs. \nObject.entries(obj)",
    "points": "1"
  },
  {
    "id": "78",
    "type": "memorize",
    "dificult": "easy",
    "method": "object",
    "function": "Object.freeze()",
    "instruction": "Freeze the object {a: 1} so that its properties cannot be modified using `Object.freeze()`.",
    "expectedResult": "{a: 1} (immutable)",
    "template": "function main(obj={a: 1}) {\n  // Your code here\n  return obj;\n}",
    "hint": "The `Object.freeze()` method prevents modification of an object's properties. \nObject.freeze(obj)",
    "points": "1"
  },
  {
    "id": "79",
    "type": "memorize",
    "dificult": "medium",
    "method": "object",
    "function": "Object.fromEntries()",
    "instruction": "Convert the array [['a', 1], ['b', 2]] into an object using `Object.fromEntries()`.",
    "expectedResult": "{a: 1, b: 2}",
    "template": "function main(entries=[['a', 1], ['b', 2]]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.fromEntries()` method converts a list of key-value pairs into an object. \nObject.fromEntries(entries)",
    "points": "2"
  },
  {
    "id": "80",
    "type": "memorize",
    "dificult": "medium",
    "method": "object",
    "function": "Object.getOwnPropertyDescriptor()",
    "instruction": "Retrieve the descriptor of property 'a' in the object {a: 1} using `Object.getOwnPropertyDescriptor()`.",
    "expectedResult": "{ value: 1, writable: true, enumerable: true, configurable: true }",
    "template": "function main(obj={a: 1}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.getOwnPropertyDescriptor()` method returns property descriptors. \nObject.getOwnPropertyDescriptor(obj, prop)",
    "points": "2"
  },
  {
    "id": "81",
    "type": "memorize",
    "dificult": "medium",
    "method": "object",
    "function": "Object.getOwnPropertyDescriptors()",
    "instruction": "Retrieve all property descriptors of the object {a: 1, b: 2} using `Object.getOwnPropertyDescriptors()`.",
    "expectedResult": "{ a: { value: 1, ... }, b: { value: 2, ... } }",
    "template": "function main(obj={a: 1, b: 2}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.getOwnPropertyDescriptors()` method returns all property descriptors of an object. \nObject.getOwnPropertyDescriptors(obj)",
    "points": "2"
  },
  {
    "id": "82",
    "type": "memorize",
    "dificult": "medium",
    "method": "object",
    "function": "Object.getOwnPropertyNames()",
    "instruction": "Retrieve all property names (keys) of the object {a: 1, b: 2} using `Object.getOwnPropertyNames()`.",
    "expectedResult": "['a', 'b']",
    "template": "function main(obj={a: 1, b: 2}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.getOwnPropertyNames()` method returns all property names, including non-enumerable ones. \nObject.getOwnPropertyNames(obj)",
    "points": "2"
  },
  {
    "id": "83",
    "type": "memorize",
    "dificult": "medium",
    "method": "object",
    "function": "Object.getOwnPropertySymbols()",
    "instruction": "Retrieve all symbol properties of an object using `Object.getOwnPropertySymbols()`.",
    "expectedResult": "[Symbol('key')]",
    "template": "function main() {\n  const symbolKey = Symbol('key');\n  const obj = { [symbolKey]: 'value' };\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.getOwnPropertySymbols()` method returns an array of symbol properties. \nObject.getOwnPropertySymbols(obj)",
    "points": "2"
  },
  {
    "id": "84",
    "type": "memorize",
    "dificult": "medium",
    "method": "object",
    "function": "Object.getPrototypeOf()",
    "instruction": "Retrieve the prototype of an object created with `Object.create({a: 1})` using `Object.getPrototypeOf()`.",
    "expectedResult": "{a: 1}",
    "template": "function main() {\n  const proto = {a: 1};\n  const obj = Object.create(proto);\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.getPrototypeOf()` method returns the prototype of an object. \nObject.getPrototypeOf(obj)",
    "points": "2"
  },
  {
    "id": "85",
    "type": "memorize",
    "dificult": "hard",
    "method": "object",
    "function": "Object.groupBy()",
    "instruction": "Group an array of numbers [1, 2, 3, 4] by their parity (even or odd) using `Object.groupBy()`.",
    "expectedResult": "{ even: [2, 4], odd: [1, 3] }",
    "template": "function main(arr=[1, 2, 3, 4]) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.groupBy()` method groups elements of an array into an object based on a callback function. \nObject.groupBy(array, callback)",
    "points": "3"
  },
  {
    "id": "86",
    "type": "memorize",
    "dificult": "easy",
    "method": "object",
    "function": "Object.hasOwn()",
    "instruction": "Check if the object {a: 1} has its own property 'a' using `Object.hasOwn()`.",
    "expectedResult": "true",
    "template": "function main(obj={a: 1}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.hasOwn()` method checks if an object has its own property (non-inherited). \nObject.hasOwn(obj, prop)",
    "points": "1"
  },
  {
    "id": "87",
    "type": "memorize",
    "dificult": "easy",
    "method": "object",
    "function": "Object.is()",
    "instruction": "Check if two values `0` and `-0` are the same using `Object.is()`.",
    "expectedResult": "false",
    "template": "function main(value1=0, value2=-0) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.is()` method checks if two values are the same, considering edge cases like `NaN` and `-0`. \nObject.is(value1, value2)",
    "points": "1"
  },
  {
    "id": "88",
    "type": "memorize",
    "dificult": "easy",
    "method": "object",
    "function": "Object.isExtensible()",
    "instruction": "Check if the object {a: 1} is extensible using `Object.isExtensible()`.",
    "expectedResult": "true",
    "template": "function main(obj={a: 1}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.isExtensible()` method checks if properties can be added to an object. \nObject.isExtensible(obj)",
    "points": "1"
  },
  {
    "id": "89",
    "type": "memorize",
    "dificult": "easy",
    "method": "object",
    "function": "Object.isFrozen()",
    "instruction": "Check if the object {a: 1} is frozen using `Object.isFrozen()`.",
    "expectedResult": "false",
    "template": "function main(obj={a: 1}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.isFrozen()` method checks if an object is frozen (not extensible and properties are immutable). \nObject.isFrozen(obj)",
    "points": "1"
  },
  {
    "id": "90",
    "type": "memorize",
    "dificult": "easy",
    "method": "object",
    "function": "Object.isSealed()",
    "instruction": "Check if the object {a: 1} is sealed using `Object.isSealed()`.",
    "expectedResult": "false",
    "template": "function main(obj={a: 1}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.isSealed()` method checks if an object is sealed (not extensible, properties cannot be added or deleted). \nObject.isSealed(obj)",
    "points": "1"
  },
  {
    "id": "91",
    "type": "memorize",
    "dificult": "easy",
    "method": "object",
    "function": "Object.keys()",
    "instruction": "Retrieve all keys of the object {a: 1, b: 2} using `Object.keys()`.",
    "expectedResult": "['a', 'b']",
    "template": "function main(obj={a: 1, b: 2}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.keys()` method returns an array of an object's own enumerable keys. \nObject.keys(obj)",
    "points": "1"
  },
  {
    "id": "92",
    "type": "memorize",
    "dificult": "medium",
    "method": "object",
    "function": "Object.preventExtensions()",
    "instruction": "Prevent any new properties from being added to the object {a: 1} using `Object.preventExtensions()`.",
    "expectedResult": "Object is no longer extensible",
    "template": "function main(obj={a: 1}) {\n  // Your code here\n  return obj;\n}",
    "hint": "The `Object.preventExtensions()` method prevents properties from being added to an object. \nObject.preventExtensions(obj)",
    "points": "2"
  },
  {
    "id": "93",
    "type": "memorize",
    "dificult": "medium",
    "method": "object",
    "function": "Object.seal()",
    "instruction": "Seal the object {a: 1} so properties cannot be added or deleted using `Object.seal()`.",
    "expectedResult": "Object is sealed",
    "template": "function main(obj={a: 1}) {\n  // Your code here\n  return obj;\n}",
    "hint": "The `Object.seal()` method prevents adding or deleting properties but allows modification of existing ones. \nObject.seal(obj)",
    "points": "2"
  },
  {
    "id": "94",
    "type": "memorize",
    "dificult": "easy",
    "method": "object",
    "function": "Object.values()",
    "instruction": "Retrieve all values of the object {a: 1, b: 2} using `Object.values()`.",
    "expectedResult": "[1, 2]",
    "template": "function main(obj={a: 1, b: 2}) {\n  // Your code here\n  return '';\n}",
    "hint": "The `Object.values()` method returns an array of an object's own enumerable values. \nObject.values(obj)",
    "points": "1"
  }
  
]